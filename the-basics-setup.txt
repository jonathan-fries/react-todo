Create empty project

create package.json file

install react

npm install --save react react-dom react-scripts

install babel and webpack - babel is a javascript tanspiler used for JSX and ES6 to ES5 conversion

npm install --save-dev @babel/core @babel/polyfill @babel/preset-env @babel/preset-react webpack webpack-cli webpack-dev-server

create webpack.config.js
create src and public (css/img) directories

What is in src will be transpiled by babel and served along with what is in public.

Create index.html file in your public directory:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE-edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="author" content="Your Name" >
    <meta name="description" content="" >
    <meta name="theme-color" content="#000000">
    <title>React Basic</title>
</head>
<body>
<noscript>
    You need to enable JavaScript to run this app.
</noscript>

    <div id="react-todo"></div>
    <script src="index.js" ></script>

</body>
</html>

Create app.js and client.js files in your src directory:

Client.js:

import React from 'react';
import ReactDom from 'react-dom';
import App from './app';

ReactDom.render(<App />, document.getElementById('react-todo'));

App.js:

import React from 'react';

export default class App extends React.Component{

    constructor(props){
        super(props);

    }

    render(){
        return <h1>Hello World!</h1>;
    }
}

Add start script to package.json file:

"scripts": {
    "start": "webpack-dev-server"
},

Add babel presets to package.json file:

"babel": {
    "presets": [
      "@babel/preset-env",
      "@babel/preset-react"
    ]
  }

Add webpack.config.js file:


module.exports = {
    devServer: {
        inline:true,
        contentBase:'./public',
        port: 14171,
        historyApiFallback: true
    },
    mode: 'development',
    entry: ['@babel/polyfill', './src/client.js'],
    output: {
        filename: 'index.js'
    },
    module: {
        rules: [
            {test:/\.js$/,
                exclude:/node_modules/,
                use: {loader: 'babel-loader'}
            }
        ]
    }
};


------------------------------------------

That's the basics - after that you should have a working react app.

Now it is time to do more advanced stuff.

First create your components directory.

Then create your navigation.js file inside of it.

Now import the react-router with npm:

npm install --save react-router-dom

This will install the react-router as a dependency.

1. Creat components directory:
2. Create appcontainer.js in components:

import {Route} from "react-router-dom";
import Home from "./home";
import ToDoList from "./to-do-list";
import React from 'react';
import Navigation from './navigation';

export default class Nav extends React.Component {

    constructor(props) {
        super(props);

    }

    render() {
        return <Navigation>
                <Route exact path="/" component={Home}/>
                <Route path = "/todolist" component = {ToDoList} />
            </Navigation>;
    }
}

Create navigation.js in components:

import React from 'react';
import {Link, Route} from "react-router-dom";

export default class Navigation extends React.Component {

    constructor(props) {
        super(props);

    }

    render() {
        return <div><nav><ul className="header">
                <li><Link to="/">Home</Link></li>
                <li><Link to="/todolist">To Do List</Link></li>
            </ul></nav>
            {this.props.children}</div>;
    }

}

3. Create home.js in components:

import React from 'react';

export default class Home extends React.Component{

    constructor(props){
        super(props);

    }

    render(){
        return <h1>Hello World!</h1>;
    }
}

4. Create to-do-list.js in components:

import React from 'react';

export default class ToDoList extends React.Component{

    constructor(props){
        super(props);

    }

    render(){
        return <h1>To-Do List will go here!</h1>;
    }
}

5. Change the app to show the appcontainer surrounded by BrowserRouter:

import {
    BrowserRouter
} from "react-router-dom";

*****

render(){
        return <BrowserRouter>
            <AppContainer/>
        </BrowserRouter>;



-------

References:

Router:
https://www.kirupa.com/react/creating_single_page_app_react_using_react_router.htm
https://reactjs.org/docs/thinking-in-react.html






